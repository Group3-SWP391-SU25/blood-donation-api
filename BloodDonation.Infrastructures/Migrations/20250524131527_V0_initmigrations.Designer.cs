// <auto-generated />
using System;
using BloodDonation.Infrastructures;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BloodDonation.Infrastructures.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250524131527_V0_initmigrations")]
    partial class V0_initmigrations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BloodDonation.Domain.Entities.Blog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Html")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imageurls")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Blog");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.BloodComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShelfLifeInDay")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("StorageTemerature")
                        .HasColumnType("float");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("BloodComponent");

                    b.HasData(
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b79"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 5, 24, 20, 15, 26, 646, DateTimeKind.Local).AddTicks(7051),
                            IsDeleted = false,
                            Name = "Red Blood Cells",
                            ShelfLifeInDay = 0,
                            Status = "",
                            StorageTemerature = 0.0
                        },
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b78"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 5, 24, 20, 15, 26, 646, DateTimeKind.Local).AddTicks(7055),
                            IsDeleted = false,
                            Name = "Plasma",
                            ShelfLifeInDay = 0,
                            Status = "",
                            StorageTemerature = 0.0
                        },
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b77"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 5, 24, 20, 15, 26, 646, DateTimeKind.Local).AddTicks(7058),
                            IsDeleted = false,
                            Name = "Platelets",
                            ShelfLifeInDay = 0,
                            Status = "",
                            StorageTemerature = 0.0
                        });
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.BloodDonate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BloodRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Volume")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BloodRequestId")
                        .IsUnique();

                    b.ToTable("BloodDonate");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.BloodGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("BloodGroup");

                    b.HasData(
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b83"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 5, 24, 20, 15, 26, 646, DateTimeKind.Local).AddTicks(6972),
                            IsDeleted = false,
                            Type = "A"
                        },
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b82"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 5, 24, 20, 15, 26, 646, DateTimeKind.Local).AddTicks(6980),
                            IsDeleted = false,
                            Type = "B"
                        },
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b81"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 5, 24, 20, 15, 26, 646, DateTimeKind.Local).AddTicks(6982),
                            IsDeleted = false,
                            Type = "O"
                        },
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b80"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 5, 24, 20, 15, 26, 646, DateTimeKind.Local).AddTicks(6984),
                            IsDeleted = false,
                            Type = "AB"
                        });
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.BloodIssue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BloodStorageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateIssue")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EmergencyBloodRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Volume")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BloodStorageId")
                        .IsUnique();

                    b.HasIndex("EmergencyBloodRequestId")
                        .IsUnique();

                    b.ToTable("BloodIssue");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.BloodRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DonatedDateRequest")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ReasonReject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BloodRequest");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.BlooodStorage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BloodComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BloodDonateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BloodGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Volume")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BloodComponentId");

                    b.HasIndex("BloodDonateId");

                    b.HasIndex("BloodGroupId");

                    b.ToTable("BlooodStorage");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.EmergencyBloodRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ReasonReject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Volume")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EmergencyBloodRequest");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b86"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 5, 24, 20, 15, 26, 646, DateTimeKind.Local).AddTicks(6590),
                            IsDeleted = false,
                            Name = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b85"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 5, 24, 20, 15, 26, 646, DateTimeKind.Local).AddTicks(6629),
                            IsDeleted = false,
                            Name = "MEMBER"
                        },
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b84"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 5, 24, 20, 15, 26, 646, DateTimeKind.Local).AddTicks(6631),
                            IsDeleted = false,
                            Name = "STAFF"
                        });
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Addresss")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BloodGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BloodGroupId");

                    b.HasIndex("RoleId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.Blog", b =>
                {
                    b.HasOne("BloodDonation.Domain.Entities.User", "User")
                        .WithMany("Blogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.BloodDonate", b =>
                {
                    b.HasOne("BloodDonation.Domain.Entities.BloodRequest", "BloodRequest")
                        .WithOne("BloodDonate")
                        .HasForeignKey("BloodDonation.Domain.Entities.BloodDonate", "BloodRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodRequest");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.BloodIssue", b =>
                {
                    b.HasOne("BloodDonation.Domain.Entities.BlooodStorage", "BloodStorage")
                        .WithOne("BloodIssue")
                        .HasForeignKey("BloodDonation.Domain.Entities.BloodIssue", "BloodStorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BloodDonation.Domain.Entities.EmergencyBloodRequest", "EmergencyBloodRequest")
                        .WithOne("BloodIssue")
                        .HasForeignKey("BloodDonation.Domain.Entities.BloodIssue", "EmergencyBloodRequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BloodStorage");

                    b.Navigation("EmergencyBloodRequest");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.BloodRequest", b =>
                {
                    b.HasOne("BloodDonation.Domain.Entities.User", "User")
                        .WithMany("BloodRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.BlooodStorage", b =>
                {
                    b.HasOne("BloodDonation.Domain.Entities.BloodComponent", "BloodComponent")
                        .WithMany("BloodStorages")
                        .HasForeignKey("BloodComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BloodDonation.Domain.Entities.BloodDonate", "BloodDonate")
                        .WithMany()
                        .HasForeignKey("BloodDonateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BloodDonation.Domain.Entities.BloodGroup", "BloodGroup")
                        .WithMany("BloodStorages")
                        .HasForeignKey("BloodGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BloodComponent");

                    b.Navigation("BloodDonate");

                    b.Navigation("BloodGroup");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.EmergencyBloodRequest", b =>
                {
                    b.HasOne("BloodDonation.Domain.Entities.User", "User")
                        .WithMany("EmergencyBloodRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.User", b =>
                {
                    b.HasOne("BloodDonation.Domain.Entities.BloodGroup", "BloodGroup")
                        .WithMany("Users")
                        .HasForeignKey("BloodGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BloodDonation.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodGroup");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.BloodComponent", b =>
                {
                    b.Navigation("BloodStorages");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.BloodGroup", b =>
                {
                    b.Navigation("BloodStorages");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.BloodRequest", b =>
                {
                    b.Navigation("BloodDonate");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.BlooodStorage", b =>
                {
                    b.Navigation("BloodIssue");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.EmergencyBloodRequest", b =>
                {
                    b.Navigation("BloodIssue");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.User", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("BloodRequests");

                    b.Navigation("EmergencyBloodRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
