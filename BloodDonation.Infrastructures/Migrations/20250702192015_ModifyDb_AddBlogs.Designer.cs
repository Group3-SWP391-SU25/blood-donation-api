// <auto-generated />
using System;
using BloodDonation.Infrastructures;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BloodDonation.Infrastructures.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250702192015_ModifyDb_AddBlogs")]
    partial class ModifyDb_AddBlogs
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BloodDonation.Domain.Entities.Blog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.BloodCheck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BloodDonationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BloodGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CheckedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("HCT")
                        .HasColumnType("float");

                    b.Property<double>("HGB")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("MCH")
                        .HasColumnType("float");

                    b.Property<double>("MCHC")
                        .HasColumnType("float");

                    b.Property<double>("MCV")
                        .HasColumnType("float");

                    b.Property<double>("MPV")
                        .HasColumnType("float");

                    b.Property<double>("PLT")
                        .HasColumnType("float");

                    b.Property<double>("RBC")
                        .HasColumnType("float");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("WBC")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BloodDonationId")
                        .IsUnique();

                    b.HasIndex("BloodGroupId");

                    b.ToTable("BloodChecks");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.BloodComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("MaxStorageTemerature")
                        .HasColumnType("float");

                    b.Property<double>("MinStorageTemerature")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ShelfLifeInDay")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("BloodComponents");

                    b.HasData(
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b79"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 7, 3, 2, 20, 14, 355, DateTimeKind.Local).AddTicks(5977),
                            IsDeleted = false,
                            MaxStorageTemerature = 6.0,
                            MinStorageTemerature = 2.0,
                            Name = "Hồng cầu lắng",
                            ShelfLifeInDay = 35.0,
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b78"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 7, 3, 2, 20, 14, 355, DateTimeKind.Local).AddTicks(5983),
                            IsDeleted = false,
                            MaxStorageTemerature = 6.0,
                            MinStorageTemerature = 2.0,
                            Name = "Khối hồng cầu có dung dịch bảo quản",
                            ShelfLifeInDay = 35.0,
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b77"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 7, 3, 2, 20, 14, 355, DateTimeKind.Local).AddTicks(5985),
                            IsDeleted = false,
                            MaxStorageTemerature = 6.0,
                            MinStorageTemerature = 2.0,
                            Name = "Khối hồng cầu rửa (xử lý trong hệ thống hở)",
                            ShelfLifeInDay = 1.0,
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b76"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 7, 3, 2, 20, 14, 355, DateTimeKind.Local).AddTicks(5988),
                            IsDeleted = false,
                            MaxStorageTemerature = 6.0,
                            MinStorageTemerature = 2.0,
                            Name = "Khối hồng cầu rửa (rửa trong hệ thống kín và có bổ sung dung dịch bảo quản hồng cầu)",
                            ShelfLifeInDay = 14.0,
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b75"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 7, 3, 2, 20, 14, 355, DateTimeKind.Local).AddTicks(5989),
                            IsDeleted = false,
                            MaxStorageTemerature = -60.0,
                            MinStorageTemerature = -80.0,
                            Name = "Khối hồng cầu đông lạnh",
                            ShelfLifeInDay = 365242199.0,
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b74"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 7, 3, 2, 20, 14, 355, DateTimeKind.Local).AddTicks(5991),
                            IsDeleted = false,
                            MaxStorageTemerature = 24.0,
                            MinStorageTemerature = 20.0,
                            Name = "Khối tiểu cầu (Xử lí kín)",
                            ShelfLifeInDay = 5.0,
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b73"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 7, 3, 2, 20, 14, 355, DateTimeKind.Local).AddTicks(5992),
                            IsDeleted = false,
                            MaxStorageTemerature = 24.0,
                            MinStorageTemerature = 20.0,
                            Name = "Khối tiểu cầu (Xử lí hở)",
                            ShelfLifeInDay = 0.25,
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b72"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 7, 3, 2, 20, 14, 355, DateTimeKind.Local).AddTicks(5994),
                            IsDeleted = false,
                            MaxStorageTemerature = 24.0,
                            MinStorageTemerature = 20.0,
                            Name = "Khối tiểu cầu lọc bạch cầu (Xử lí kín)",
                            ShelfLifeInDay = 5.0,
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b71"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 7, 3, 2, 20, 14, 355, DateTimeKind.Local).AddTicks(5995),
                            IsDeleted = false,
                            MaxStorageTemerature = 24.0,
                            MinStorageTemerature = 20.0,
                            Name = "Khối tiểu cầu lọc bạch cầu (Xử lí hở)",
                            ShelfLifeInDay = 0.25,
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b70"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 7, 3, 2, 20, 14, 355, DateTimeKind.Local).AddTicks(5996),
                            IsDeleted = false,
                            MaxStorageTemerature = -25.0,
                            MinStorageTemerature = -272.0,
                            Name = "Huyết tương đông lạnh",
                            ShelfLifeInDay = 2.0,
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b69"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 7, 3, 2, 20, 14, 355, DateTimeKind.Local).AddTicks(5998),
                            IsDeleted = false,
                            MaxStorageTemerature = 6.0,
                            MinStorageTemerature = 2.0,
                            Name = "Huyết tương (Xử lí kín)",
                            ShelfLifeInDay = 14.0,
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b68"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 7, 3, 2, 20, 14, 355, DateTimeKind.Local).AddTicks(5999),
                            IsDeleted = false,
                            MaxStorageTemerature = 6.0,
                            MinStorageTemerature = 2.0,
                            Name = "Huyết tương (Xử lí hở)",
                            ShelfLifeInDay = 1.0,
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b67"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 7, 3, 2, 20, 14, 355, DateTimeKind.Local).AddTicks(6001),
                            IsDeleted = false,
                            MaxStorageTemerature = 6.0,
                            MinStorageTemerature = 2.0,
                            Name = "Tủa lạnh (Xử lí kín)",
                            ShelfLifeInDay = 14.0,
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b66"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 7, 3, 2, 20, 14, 355, DateTimeKind.Local).AddTicks(6002),
                            IsDeleted = false,
                            MaxStorageTemerature = 6.0,
                            MinStorageTemerature = 2.0,
                            Name = "Tủa lạnh (Xử lí hở)",
                            ShelfLifeInDay = 1.0,
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b65"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 7, 3, 2, 20, 14, 355, DateTimeKind.Local).AddTicks(6004),
                            IsDeleted = false,
                            MaxStorageTemerature = 24.0,
                            MinStorageTemerature = 20.0,
                            Name = "Khối bạch cầu hạt trung tính",
                            ShelfLifeInDay = 1.0,
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b64"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 7, 3, 2, 20, 14, 355, DateTimeKind.Local).AddTicks(6005),
                            IsDeleted = false,
                            MaxStorageTemerature = 6.0,
                            MinStorageTemerature = 2.0,
                            Name = "Máu toàn phần (Bảo quản)",
                            ShelfLifeInDay = 35.0,
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b63"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 7, 3, 2, 20, 14, 355, DateTimeKind.Local).AddTicks(6007),
                            IsDeleted = false,
                            MaxStorageTemerature = 24.0,
                            MinStorageTemerature = 20.0,
                            Name = "Máu toàn phần",
                            ShelfLifeInDay = 1.0,
                            Status = ""
                        });
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.BloodDonation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BloodDonationRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BloodType")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DonationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Volume")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BloodDonationRequestId")
                        .IsUnique();

                    b.ToTable("BloodDonation");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.BloodDonationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BloodType")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DonatedDateRequest")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasBloodTransfusionHistory")
                        .HasColumnType("bit");

                    b.Property<bool>("HasDrugInjectionHistory")
                        .HasColumnType("bit");

                    b.Property<bool>("HasRecentIllnessOrMedication")
                        .HasColumnType("bit");

                    b.Property<bool>("HasRecentSkinPenetrationOrSurgery")
                        .HasColumnType("bit");

                    b.Property<bool>("HasVisitedEpidemicArea")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ReasonReject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TimeSlot")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BloodDonationRequests");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.BloodGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("RhFactor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("BloodGroups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b83"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 7, 3, 2, 20, 14, 355, DateTimeKind.Local).AddTicks(5876),
                            IsDeleted = false,
                            RhFactor = "+",
                            Type = "A"
                        },
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b82"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 7, 3, 2, 20, 14, 355, DateTimeKind.Local).AddTicks(5880),
                            IsDeleted = false,
                            RhFactor = "-",
                            Type = "A"
                        },
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b81"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 7, 3, 2, 20, 14, 355, DateTimeKind.Local).AddTicks(5882),
                            IsDeleted = false,
                            RhFactor = "+",
                            Type = "B"
                        },
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b80"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 7, 3, 2, 20, 14, 355, DateTimeKind.Local).AddTicks(5884),
                            IsDeleted = false,
                            RhFactor = "-",
                            Type = "B"
                        },
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b7f"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 7, 3, 2, 20, 14, 355, DateTimeKind.Local).AddTicks(5886),
                            IsDeleted = false,
                            RhFactor = "+",
                            Type = "AB"
                        },
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b7e"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 7, 3, 2, 20, 14, 355, DateTimeKind.Local).AddTicks(5928),
                            IsDeleted = false,
                            RhFactor = "-",
                            Type = "AB"
                        },
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b7d"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 7, 3, 2, 20, 14, 355, DateTimeKind.Local).AddTicks(5931),
                            IsDeleted = false,
                            RhFactor = "+",
                            Type = "O"
                        },
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b7c"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 7, 3, 2, 20, 14, 355, DateTimeKind.Local).AddTicks(5932),
                            IsDeleted = false,
                            RhFactor = "-",
                            Type = "O"
                        });
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.BloodIssue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BloodStorageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateIssue")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EmergencyBloodRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Volume")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BloodStorageId")
                        .IsUnique();

                    b.HasIndex("EmergencyBloodRequestId")
                        .IsUnique();

                    b.ToTable("BloodIssues");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.BloodStorage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BloodComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BloodDonationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BloodGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Volume")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BloodComponentId");

                    b.HasIndex("BloodDonationId");

                    b.HasIndex("BloodGroupId");

                    b.ToTable("BloodStorages");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.EmergencyBloodRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BloodComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BloodGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ReasonReject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Volume")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BloodComponentId");

                    b.HasIndex("BloodGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("EmergencyBloodRequests");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.HealthCheckForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<Guid>("BloodDonateRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasChronicDisease")
                        .HasColumnType("bit");

                    b.Property<bool>("HasUnsafeSexualBehaviourOrSameSexSexualContact")
                        .HasColumnType("bit");

                    b.Property<double>("Hemoglobin")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInfectiousDisease")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPregnant")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsedAlcoholRecently")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("VolumeBloodDonated")
                        .HasColumnType("float");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BloodDonateRequestId")
                        .IsUnique();

                    b.ToTable("HealthCheckForms");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b86"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 7, 3, 2, 20, 14, 355, DateTimeKind.Local).AddTicks(5655),
                            IsDeleted = false,
                            Name = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b85"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 7, 3, 2, 20, 14, 355, DateTimeKind.Local).AddTicks(5680),
                            IsDeleted = false,
                            Name = "MEMBER"
                        },
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b84"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 7, 3, 2, 20, 14, 355, DateTimeKind.Local).AddTicks(5682),
                            IsDeleted = false,
                            Name = "NURSE"
                        },
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b87"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 7, 3, 2, 20, 14, 355, DateTimeKind.Local).AddTicks(5684),
                            IsDeleted = false,
                            Name = "SUPERVISOR"
                        });
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Addresss")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BackUrlIdentity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("BloodGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrontUrlIdentity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BloodGroupId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.Blog", b =>
                {
                    b.HasOne("BloodDonation.Domain.Entities.User", null)
                        .WithMany("Blogs")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.BloodCheck", b =>
                {
                    b.HasOne("BloodDonation.Domain.Entities.BloodDonation", "BloodDonation")
                        .WithOne("BloodCheck")
                        .HasForeignKey("BloodDonation.Domain.Entities.BloodCheck", "BloodDonationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BloodDonation.Domain.Entities.BloodGroup", "BloodGroup")
                        .WithMany("BloodChecks")
                        .HasForeignKey("BloodGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BloodDonation");

                    b.Navigation("BloodGroup");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.BloodDonation", b =>
                {
                    b.HasOne("BloodDonation.Domain.Entities.BloodDonationRequest", "BloodDonationRequest")
                        .WithOne("BloodDonation")
                        .HasForeignKey("BloodDonation.Domain.Entities.BloodDonation", "BloodDonationRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodDonationRequest");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.BloodDonationRequest", b =>
                {
                    b.HasOne("BloodDonation.Domain.Entities.User", "User")
                        .WithMany("BloodRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.BloodIssue", b =>
                {
                    b.HasOne("BloodDonation.Domain.Entities.BloodStorage", "BloodStorage")
                        .WithOne("BloodIssue")
                        .HasForeignKey("BloodDonation.Domain.Entities.BloodIssue", "BloodStorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BloodDonation.Domain.Entities.EmergencyBloodRequest", "EmergencyBloodRequest")
                        .WithOne("BloodIssue")
                        .HasForeignKey("BloodDonation.Domain.Entities.BloodIssue", "EmergencyBloodRequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BloodStorage");

                    b.Navigation("EmergencyBloodRequest");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.BloodStorage", b =>
                {
                    b.HasOne("BloodDonation.Domain.Entities.BloodComponent", "BloodComponent")
                        .WithMany("BloodStorages")
                        .HasForeignKey("BloodComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BloodDonation.Domain.Entities.BloodDonation", "BloodDonate")
                        .WithMany("BloodStorage")
                        .HasForeignKey("BloodDonationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BloodDonation.Domain.Entities.BloodGroup", "BloodGroup")
                        .WithMany("BloodStorages")
                        .HasForeignKey("BloodGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BloodComponent");

                    b.Navigation("BloodDonate");

                    b.Navigation("BloodGroup");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.EmergencyBloodRequest", b =>
                {
                    b.HasOne("BloodDonation.Domain.Entities.BloodComponent", "BloodComponent")
                        .WithMany("EmergencyBloodRequests")
                        .HasForeignKey("BloodComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BloodDonation.Domain.Entities.BloodGroup", "BloodGroup")
                        .WithMany()
                        .HasForeignKey("BloodGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BloodDonation.Domain.Entities.User", "User")
                        .WithMany("EmergencyBloodRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodComponent");

                    b.Navigation("BloodGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.HealthCheckForm", b =>
                {
                    b.HasOne("BloodDonation.Domain.Entities.BloodDonationRequest", "BloodDonationRequest")
                        .WithOne("HealthCheckForm")
                        .HasForeignKey("BloodDonation.Domain.Entities.HealthCheckForm", "BloodDonateRequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BloodDonationRequest");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.User", b =>
                {
                    b.HasOne("BloodDonation.Domain.Entities.BloodGroup", "BloodGroup")
                        .WithMany("Users")
                        .HasForeignKey("BloodGroupId");

                    b.HasOne("BloodDonation.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodGroup");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.BloodComponent", b =>
                {
                    b.Navigation("BloodStorages");

                    b.Navigation("EmergencyBloodRequests");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.BloodDonation", b =>
                {
                    b.Navigation("BloodCheck");

                    b.Navigation("BloodStorage");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.BloodDonationRequest", b =>
                {
                    b.Navigation("BloodDonation");

                    b.Navigation("HealthCheckForm");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.BloodGroup", b =>
                {
                    b.Navigation("BloodChecks");

                    b.Navigation("BloodStorages");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.BloodStorage", b =>
                {
                    b.Navigation("BloodIssue");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.EmergencyBloodRequest", b =>
                {
                    b.Navigation("BloodIssue");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.User", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("BloodRequests");

                    b.Navigation("EmergencyBloodRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
