// <auto-generated />
using System;
using BloodDonation.Infrastructures;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BloodDonation.Infrastructures.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250604105117_UpdateBloodDonationRequest")]
    partial class UpdateBloodDonationRequest
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BloodDonation.Domain.Entities.Blog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Html")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imageurls")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.BloodComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShelfLifeInDay")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("StorageTemerature")
                        .HasColumnType("float");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("BloodComponents");

                    b.HasData(
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b79"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 6, 4, 17, 51, 15, 527, DateTimeKind.Local).AddTicks(6871),
                            IsDeleted = false,
                            Name = "Red Blood Cells",
                            ShelfLifeInDay = 0,
                            Status = "",
                            StorageTemerature = 0.0
                        },
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b78"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 6, 4, 17, 51, 15, 527, DateTimeKind.Local).AddTicks(6874),
                            IsDeleted = false,
                            Name = "Plasma",
                            ShelfLifeInDay = 0,
                            Status = "",
                            StorageTemerature = 0.0
                        },
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b77"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 6, 4, 17, 51, 15, 527, DateTimeKind.Local).AddTicks(6877),
                            IsDeleted = false,
                            Name = "Platelets",
                            ShelfLifeInDay = 0,
                            Status = "",
                            StorageTemerature = 0.0
                        });
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.BloodDonationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DonatedDateRequest")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasBloodTransfusionHistory")
                        .HasColumnType("bit");

                    b.Property<bool>("HasDrugInjectionHistory")
                        .HasColumnType("bit");

                    b.Property<bool>("HasRecentIllnessOrMedication")
                        .HasColumnType("bit");

                    b.Property<bool>("HasRecentSkinPenetrationOrSurgery")
                        .HasColumnType("bit");

                    b.Property<bool>("HasVisitedEpidemicArea")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ReasonReject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BloodDonationRequests");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.BloodDonationRequirement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Actual")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("BloodDonationRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPass")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Requirement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BloodDonationRequestId");

                    b.ToTable("BloodDonationRequirement");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.BloodGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("BloodGroups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b83"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 6, 4, 17, 51, 15, 527, DateTimeKind.Local).AddTicks(6810),
                            IsDeleted = false,
                            Type = "A"
                        },
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b82"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 6, 4, 17, 51, 15, 527, DateTimeKind.Local).AddTicks(6814),
                            IsDeleted = false,
                            Type = "B"
                        },
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b81"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 6, 4, 17, 51, 15, 527, DateTimeKind.Local).AddTicks(6816),
                            IsDeleted = false,
                            Type = "O"
                        },
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b80"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 6, 4, 17, 51, 15, 527, DateTimeKind.Local).AddTicks(6835),
                            IsDeleted = false,
                            Type = "AB"
                        });
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.BloodIssue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BloodStorageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateIssue")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EmergencyBloodRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Volume")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BloodStorageId")
                        .IsUnique();

                    b.HasIndex("EmergencyBloodRequestId")
                        .IsUnique();

                    b.ToTable("BloodIssues");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.BlooodStorage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BloodComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BloodDonateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BloodGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Volume")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BloodComponentId");

                    b.HasIndex("BloodDonateId");

                    b.HasIndex("BloodGroupId");

                    b.ToTable("BloodStorages");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.EmergencyBloodRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ReasonReject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Volume")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EmergencyBloodRequests");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.HealthCheckForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<Guid>("BloodDonateRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasChronicDisease")
                        .HasColumnType("bit");

                    b.Property<bool>("HasUnsafeSexualBehaviourOrSameSexSexualContact")
                        .HasColumnType("bit");

                    b.Property<double>("Hemoglobin")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInfectiousDisease")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPregnant")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsedAlcoholRecently")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("VolumeBloodDonated")
                        .HasColumnType("float");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BloodDonateRequestId")
                        .IsUnique();

                    b.ToTable("HealthCheckForms");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b86"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 6, 4, 17, 51, 15, 527, DateTimeKind.Local).AddTicks(6535),
                            IsDeleted = false,
                            Name = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b85"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 6, 4, 17, 51, 15, 527, DateTimeKind.Local).AddTicks(6576),
                            IsDeleted = false,
                            Name = "MEMBER"
                        },
                        new
                        {
                            Id = new Guid("859a4997-1ffa-4915-b50e-9a99e4147b84"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2025, 6, 4, 17, 51, 15, 527, DateTimeKind.Local).AddTicks(6580),
                            IsDeleted = false,
                            Name = "NURSE"
                        });
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Addresss")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BackUrlIdentity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BloodGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrontUrlIdentity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BloodGroupId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.Blog", b =>
                {
                    b.HasOne("BloodDonation.Domain.Entities.User", "User")
                        .WithMany("Blogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.BloodDonationRequest", b =>
                {
                    b.HasOne("BloodDonation.Domain.Entities.User", "User")
                        .WithMany("BloodRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.BloodDonationRequirement", b =>
                {
                    b.HasOne("BloodDonation.Domain.Entities.BloodDonationRequest", null)
                        .WithMany("BloodDonationRequirements")
                        .HasForeignKey("BloodDonationRequestId");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.BloodIssue", b =>
                {
                    b.HasOne("BloodDonation.Domain.Entities.BlooodStorage", "BloodStorage")
                        .WithOne("BloodIssue")
                        .HasForeignKey("BloodDonation.Domain.Entities.BloodIssue", "BloodStorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BloodDonation.Domain.Entities.EmergencyBloodRequest", "EmergencyBloodRequest")
                        .WithOne("BloodIssue")
                        .HasForeignKey("BloodDonation.Domain.Entities.BloodIssue", "EmergencyBloodRequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BloodStorage");

                    b.Navigation("EmergencyBloodRequest");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.BlooodStorage", b =>
                {
                    b.HasOne("BloodDonation.Domain.Entities.BloodComponent", "BloodComponent")
                        .WithMany("BloodStorages")
                        .HasForeignKey("BloodComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BloodDonation.Domain.Entities.BloodDonationRequest", "BloodDonate")
                        .WithMany()
                        .HasForeignKey("BloodDonateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BloodDonation.Domain.Entities.BloodGroup", "BloodGroup")
                        .WithMany("BloodStorages")
                        .HasForeignKey("BloodGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BloodComponent");

                    b.Navigation("BloodDonate");

                    b.Navigation("BloodGroup");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.EmergencyBloodRequest", b =>
                {
                    b.HasOne("BloodDonation.Domain.Entities.User", "User")
                        .WithMany("EmergencyBloodRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.HealthCheckForm", b =>
                {
                    b.HasOne("BloodDonation.Domain.Entities.BloodDonationRequest", "BloodDonationRequest")
                        .WithOne("HealthCheckForm")
                        .HasForeignKey("BloodDonation.Domain.Entities.HealthCheckForm", "BloodDonateRequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BloodDonationRequest");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.User", b =>
                {
                    b.HasOne("BloodDonation.Domain.Entities.BloodGroup", "BloodGroup")
                        .WithMany("Users")
                        .HasForeignKey("BloodGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BloodDonation.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodGroup");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.BloodComponent", b =>
                {
                    b.Navigation("BloodStorages");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.BloodDonationRequest", b =>
                {
                    b.Navigation("BloodDonationRequirements");

                    b.Navigation("HealthCheckForm");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.BloodGroup", b =>
                {
                    b.Navigation("BloodStorages");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.BlooodStorage", b =>
                {
                    b.Navigation("BloodIssue");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.EmergencyBloodRequest", b =>
                {
                    b.Navigation("BloodIssue");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BloodDonation.Domain.Entities.User", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("BloodRequests");

                    b.Navigation("EmergencyBloodRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
